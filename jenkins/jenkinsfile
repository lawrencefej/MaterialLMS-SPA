def version

pipeline {
    agent any
    stages {
        stage('initialize_variables') {
      environment {
        commit = "${ env.GIT_COMMIT }"
        // tag = sh(script: 'git tag --points-at=HEAD', returnStdout: true)?.trim()
        tag = getTag()
        tag2 = sh(script: "git describe --tags ${commit}", returnStdout: true)?.trim()
      }
          steps {
            script {
          if (env.tag) {
            echo 'setting version as tag'
            version = tag
                  } else {
            echo 'setting version as commit'
            version = commit
          }
              echo "commit = ${commit}"
              echo "version = ${version}"
              echo "tag = ${tag}"
            echo "tag2 = ${tag2}"
            }
          }
        }
        stage('Clone the repo') {
      steps {
        // echo 'clone the repo'
        // sh 'rm -fr MaterialLMS-SPA'
        // sh 'git clone https://github.com/lawrencefej/MaterialLMS-SPA.git'
        // sh 'cd MaterialLMS-SPA'
        sh 'ls -alh'
        // testfunc()
        echo "commit = ${env.GIT_COMMIT}"
        echo "version = ${version}"
        echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
        echo "commit take 7 = ${env.GIT_COMMIT.take(7)}"
      }
        }
    }
}

String getTag() {
  tag = sh(script: 'git tag --points-at=HEAD', returnStdout: true).trim()
  // if (env.tag != '') {
  echo "gettag = ${tag}"
  if (env.tag) {
    echo 'made it here'
    return tag
  }
  echo 'didnt make it'
  return null
  }

// def getRepoURL() {
//   sh "git config --get remote.origin.url > .git/remote-url"
//   return readFile(".git/remote-url").trim()
// }

// def testfunc() {
//     repoUrl = getRepoURL()
// }
